<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>pilipala.kernel</name></assembly>
<members>
<member name="M:pilipala.data.fn.last``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 返回list最后一项
</summary>
</member>
<member name="M:pilipala.data.option.op_GreaterGreaterEqualsBar``1(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 flatMap但不返回值
</summary>
</member>
<member name="T:pilipala.data.option.TryToUnwarpNone">
<summary>
 尝试拆箱None错误
</summary>
</member>
<member name="M:pilipala.util.hash.Object.get_sha256(System.Object)">
<summary>
 转换到 sha256 字符串
</summary>
</member>
<member name="M:pilipala.util.hash.Object.get_sha1(System.Object)">
<summary>
 转换到 sha1 字符串
</summary>
</member>
<member name="M:pilipala.util.hash.Object.get_md5(System.Object)">
<summary>
 转换到 md5 字符串
</summary>
</member>
<member name="M:pilipala.util.hash.Object.hash(System.Object,System.Security.Cryptography.HashAlgorithm)">
<summary>
 转换到指定哈希算法的字符串
</summary>
</member>
<member name="M:pilipala.util.html.String.removeHtmlTags(System.String)">
<summary>
 去除html标签
</summary>
</member>
<member name="M:pilipala.util.json.Object.get_json(System.Object)">
<summary>
 序列化到json
</summary>
</member>
<member name="M:pilipala.util.markdown.String.get_markdownInHtml(System.String)">
<summary>
 将markdown字符串转换为html字符串
</summary>
</member>
<member name="M:pilipala.util.palaflake.gen">
<summary>
 生成palaflake
</summary>
</member>
<member name="T:pilipala.util.uuid.UuidFormat">
<summary>
 UUID格式
</summary>
</member>
<member name="M:pilipala.util.uuid.gen(pilipala.util.uuid.UuidFormat)">
<summary>
 生成UUID
</summary>
</member>
<member name="M:pilipala.util.yaml.String.get_yamlInJson(System.String)">
<summary>
 将yaml字符串转换为json字符串
</summary>
</member>
<member name="M:pilipala.util.encoding.String.get_base64url(System.String)">
<summary>
 转换到适用于url的base64字符串
</summary>
</member>
<member name="M:pilipala.util.encoding.String.get_base64(System.String)">
<summary>
 转换到base64字符串
</summary>
</member>
<member name="M:pilipala.util.encoding.String.get_hex(System.String)">
<summary>
 转换到16进制字符串
</summary>
</member>
<member name="M:pilipala.util.encoding.decodeBase64url(System.String)">
<summary>
 解码base64url
</summary>
</member>
<member name="M:pilipala.util.encoding.decodeBase64(System.String)">
<summary>
 解码base64
</summary>
</member>
<member name="M:pilipala.util.encoding.decodeHex(System.String)">
<summary>
 解码16进制字符串
</summary>
</member>
<member name="M:pilipala.util.encoding.getBytes(System.String)">
<summary>
 统一使用utf8编码
</summary>
</member>
<member name="M:pilipala.util.socket.tcp.Socket.get_recv(System.Net.Sockets.Socket)">
<summary>
 接收文本消息
</summary>
</member>
<member name="M:pilipala.util.socket.tcp.Socket.send(System.Net.Sockets.Socket,System.String)">
<summary>
 发送文本消息
</summary>
</member>
<member name="M:pilipala.util.socket.tcp.listen(System.UInt16,Microsoft.FSharp.Core.FSharpFunc{System.Net.Sockets.Socket,Microsoft.FSharp.Core.Unit})">
<summary>
 持续监听本机指定端口的tcp连接
 闭包 f 生命期结束后其连接会被自动销毁
 此函数会永久性阻塞当前线程
</summary>
</member>
<member name="M:pilipala.util.socket.tcp.connect(System.String,System.UInt16)">
<summary>
 与指定ip端口建立tcp连接
</summary>
</member>
<member name="M:pilipala.util.crypto.rsa.genRsaKeyPair(System.UInt16)">
<summary>
 生成RSA密钥对
</summary>
</member>
<member name="M:pilipala.util.crypto.rsa.decrypt(System.String,System.String)">
<summary>
 解密密文
</summary>
</member>
<member name="M:pilipala.util.crypto.rsa.encrypt(System.String,System.String)">
<summary>
 加密明文
</summary>
</member>
<member name="M:pilipala.util.crypto.aes.decrypt(System.String,System.String)">
<summary>
 解密密文
</summary>
</member>
<member name="M:pilipala.util.crypto.aes.encrypt(System.String,System.String)">
<summary>
 key长度必须为32
 加密明文
</summary>
</member>
<member name="F:pilipala.database.mysql.MySqlConnPool.ConnStr">
<summary>
 连接字符串
</summary>
</member>
<member name="F:pilipala.database.mysql.MySqlConnPool.ConnList">
<summary>
 连接列表
 新连接总是在此列表首部
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlConnPool.useConnection``1(Microsoft.FSharp.Core.FSharpFunc{MySql.Data.MySqlClient.MySqlConnection,``0})">
<summary>
 创建一个 MySqlConnection, 并以其为参数执行闭包 f
 MySqlConnection 销毁权交由闭包 f
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlConnPool.hostConnection``1(Microsoft.FSharp.Core.FSharpFunc{MySql.Data.MySqlClient.MySqlConnection,``0})">
<summary>
 托管一个 MySqlConnection, 并以其为参数执行闭包 f
 闭包执行完成后该 MySqlConnection 会被销毁
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlConnPool.getConnection">
<summary>
 从连接池取用 MySqlConnection
</summary>
</member>
<member name="T:pilipala.database.mysql.MySqlConnPool">
<summary>
 MySql数据库连接池
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getTable(System.String,System.Array)">
<summary>
 参数化查询到表
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getTable(System.String)">
<summary>
 所有查询均不负责类型转换
 查询到表
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstVal``1(System.String,System.String,System.Tuple{System.String,``0})">
<summary>
 从既有DataTable中查询到第一个 whereKey 等于 whereKeyVal 的行的 targetKey 值
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstVal(System.String,System.Array)">
<summary>
 参数化查询到第一个值
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstVal(System.String)">
<summary>
 查询到第一个值
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstRowFrom``1(System.Data.DataTable,System.String,``0)">
<summary>
 从既有DataTable中取出第一个 whereKey 等于 whereKeyVal 的行
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstRow(System.String,System.Array)">
<summary>
 参数化查询到第一行
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstRow(System.String)">
<summary>
 查询到第一行
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstColFrom(System.Data.DataTable)">
<summary>
 从既有DataTable中取出第一列
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstCol(System.String,System.Array)">
<summary>
 参数化查询到第一列
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getFstCol(System.String)">
<summary>
 查询到第一列
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getColFrom(System.Data.DataTable,System.String)">
<summary>
 从既有DataTable中取出指定列
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getCol(System.String,System.String,System.Array)">
<summary>
 参数化查询到指定列
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.getCol(System.String,System.String)">
<summary>
 查询到指定列
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.executeUpdate``1(System.String,System.String,``0,``0)">
<summary>
 从连接池取用 MySqlConnection 并在其上调用同名方法
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.executeUpdate``2(System.String,System.Tuple{System.String,``0},System.Tuple{System.String,``1})">
<summary>
 从连接池取用 MySqlConnection 并在其上调用同名方法
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.executeInsert``1(System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,``0}})">
<summary>
 从连接池取用 MySqlConnection 并在其上调用同名方法
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.executeDelete``1(System.String,System.String,``0)">
<summary>
 从连接池取用 MySqlConnection 并在其上调用同名方法
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.execute(System.String,System.Array)">
<summary>
 从连接池取用 MySqlConnection 并在其上调用同名方法
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.execute(System.String)">
<summary>
 从连接池取用 MySqlConnection 并在其上调用同名方法
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.#ctor(<>f__AnonymousType1454600955`4{System.String,System.String,System.UInt16,System.String},System.String,System.UInt32)">
<summary>
 以连接信息构造，并指定使用的数据库和连接池大小
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.#ctor(<>f__AnonymousType1454600955`4{System.String,System.String,System.UInt16,System.String},System.String)">
<summary>
 以连接信息构造，并指定使用的数据库
</summary>
</member>
<member name="M:pilipala.database.mysql.MySqlManager.#ctor(<>f__AnonymousType1454600955`4{System.String,System.String,System.UInt16,System.String})">
<summary>
 以连接信息构造
</summary>
</member>
<member name="T:pilipala.database.mysql.MySqlManager">
<summary>
 MySql数据库管理器
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlConnection.executeDelete``1(MySql.Data.MySqlClient.MySqlConnection,System.String,System.String,``0)">
<summary>
 删除 table 中 whereKey 等于 whereKeyVal 的行
 返回的闭包用于检测受影响的行数，当断言成立时闭包会提交事务并返回受影响的行数
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlConnection.executeInsert``1(MySql.Data.MySqlClient.MySqlConnection,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,``0}})">
<summary>
 在 table 中插入一行
 返回的闭包用于检测受影响的行数，当断言成立时闭包会提交事务并返回受影响的行数
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlConnection.executeUpdate``1(MySql.Data.MySqlClient.MySqlConnection,System.String,System.String,``0,``0)">
<summary>
 将 table 中 key 等于 oldValue 的行的 key 更新为 newValue
 返回的闭包用于检测受影响的行数，当断言成立时闭包会提交事务并返回受影响的行数
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlConnection.executeUpdate``2(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Tuple{System.String,``0},System.Tuple{System.String,``1})">
<summary>
 将 table 中 whereKey 等于 whereKeyVal 的行的 setKey 更新为 setKeyVal
 返回的闭包用于检测受影响的行数，当断言成立时闭包会提交事务并返回受影响的行数
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlConnection.execute(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Array)">
<summary>
 执行任意参数化查询
 返回的闭包用于检测受影响的行数，当断言成立时闭包会提交事务并返回受影响的行数
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlConnection.execute(MySql.Data.MySqlClient.MySqlConnection,System.String)">
<summary>
 执行任意查询
 返回的闭包用于检测受影响的行数，当断言成立时闭包会提交事务并返回受影响的行数
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlConnection.hostCommand``1(MySql.Data.MySqlClient.MySqlConnection,Microsoft.FSharp.Core.FSharpFunc{MySql.Data.MySqlClient.MySqlCommand,``0})">
<summary>
 托管一个 MySqlCommand, 并以其为参数执行闭包 f
 闭包执行完成后该 MySqlCommand 会被销毁
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlConnection.useCommand``1(MySql.Data.MySqlClient.MySqlConnection,Microsoft.FSharp.Core.FSharpFunc{MySql.Data.MySqlClient.MySqlCommand,``0})">
<summary>
 创建一个 MySqlCommand, 并以其为参数执行闭包 f
 MySqlCommand 销毁权交由闭包 f
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlCommand.hostTransaction``1(MySql.Data.MySqlClient.MySqlCommand,Microsoft.FSharp.Core.FSharpFunc{MySql.Data.MySqlClient.MySqlTransaction,``0})">
<summary>
 托管一个 MySqlTransaction, 并以其为参数执行闭包 f
 闭包执行完成后该 MySqlTransaction 会被销毁
</summary>
</member>
<member name="M:pilipala.database.mysql.ext.MySqlCommand.useTransaction``1(MySql.Data.MySqlClient.MySqlCommand,Microsoft.FSharp.Core.FSharpFunc{MySql.Data.MySqlClient.MySqlTransaction,``0})">
<summary>
 创建一个 MySqlTransaction, 并以其为参数执行闭包 f
 MySqlTransaction 销毁权交由闭包 f
</summary>
</member>
<member name="T:pilipala.container.err.FailedToEraseComment">
<summary>
 无法抹除评论
</summary>
</member>
<member name="T:pilipala.container.err.FailedToCreateComment">
<summary>
 无法创建评论
</summary>
</member>
<member name="T:pilipala.container.err.FailedToEraseStack">
<summary>
 无法抹除文章栈
</summary>
</member>
<member name="T:pilipala.container.err.FailedToCreateStack">
<summary>
 无法创建文章栈
</summary>
</member>
<member name="T:pilipala.container.err.FailedToEraseRecord">
<summary>
 无法抹除文章记录
</summary>
</member>
<member name="T:pilipala.container.err.FailedToCreateRecord">
<summary>
 无法创建文章记录
</summary>
</member>
<member name="T:pilipala.container.err.FailedToWriteCache">
<summary>
 无法写缓存错误
 这可能是由id错误或数据库连接存在问题导致的
</summary>
</member>
<member name="F:pilipala.container.post.record.PostRecord.cache">
<summary>
 字段缓存
</summary>
</member>
<member name="M:pilipala.container.post.record.PostRecord.trySummary``1(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpResult{``0,System.Exception}})">
<summary>
 以正文为参数执行闭包 f, 常用于概述为空时取得一个替代值
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.title(Microsoft.FSharp.Core.FSharpResult{System.String,System.Exception})">
<summary>
 标题
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.summary(Microsoft.FSharp.Core.FSharpResult{System.String,System.Exception})">
<summary>
 概述
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.mtime(Microsoft.FSharp.Core.FSharpResult{System.DateTime,System.Exception})">
<summary>
 修改时间
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.cover(Microsoft.FSharp.Core.FSharpResult{System.String,System.Exception})">
<summary>
 封面
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.body(Microsoft.FSharp.Core.FSharpResult{System.String,System.Exception})">
<summary>
 正文
</summary>
</member>
<member name="M:pilipala.container.post.record.PostRecord.set``1(System.String,Microsoft.FSharp.Core.FSharpResult{``0,System.Exception})">
<summary>
 写字段值
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.title">
<summary>
 标题
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.summary">
<summary>
 概述
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.recordId">
<summary>
 记录id
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.mtime">
<summary>
 修改时间
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.md5">
<summary>
 根据文章主要正文生成md5
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.cover">
<summary>
 封面
</summary>
</member>
<member name="P:pilipala.container.post.record.PostRecord.body">
<summary>
 正文
</summary>
</member>
<member name="M:pilipala.container.post.record.PostRecord.get``1(System.String)">
<summary>
 取字段会从缓存头提取
 写字段会同时写到缓存头
 此举使得写缓存时不用考虑清理缓存中相同字段的情况
 同时读缓存时也不用考虑相同的两份缓存哪个是最近写入的
 取字段值
</summary>
</member>
<member name="M:pilipala.container.post.record.erase(System.UInt64)">
<summary>
 抹除文章记录
</summary>
</member>
<member name="M:pilipala.container.post.record.create">
<summary>
 创建文章记录
 返回文章记录id
</summary>
</member>
<member name="F:pilipala.container.post.stack.PostStack.cache">
<summary>
 字段缓存
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.view(Microsoft.FSharp.Core.FSharpResult{System.UInt32,System.Exception})">
<summary>
 访问数
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.superStackId(Microsoft.FSharp.Core.FSharpResult{System.UInt64,System.Exception})">
<summary>
 上级栈id
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.star(Microsoft.FSharp.Core.FSharpResult{System.UInt32,System.Exception})">
<summary>
 星星数
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.currRecordId(Microsoft.FSharp.Core.FSharpResult{System.UInt64,System.Exception})">
<summary>
 当前记录id
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.ctime(Microsoft.FSharp.Core.FSharpResult{System.DateTime,System.Exception})">
<summary>
 创建时间
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.atime(Microsoft.FSharp.Core.FSharpResult{System.DateTime,System.Exception})">
<summary>
 访问时间
</summary>
</member>
<member name="M:pilipala.container.post.stack.PostStack.set``1(System.String,Microsoft.FSharp.Core.FSharpResult{``0,System.Exception})">
<summary>
 写字段值
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.view">
<summary>
 访问数
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.superStackId">
<summary>
 上级栈id
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.star">
<summary>
 星星数
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.stackId">
<summary>
 栈id
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.currRecordId">
<summary>
 当前记录id
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.ctime">
<summary>
 创建时间
</summary>
</member>
<member name="P:pilipala.container.post.stack.PostStack.atime">
<summary>
 访问时间
</summary>
</member>
<member name="M:pilipala.container.post.stack.PostStack.get``1(System.String)">
<summary>
 取字段会从缓存头提取
 写字段会同时写到缓存头
 此举使得写缓存时不用考虑清理缓存中相同字段的情况
 同时读缓存时也不用考虑相同的两份缓存哪个是最近写入的
 取字段值
</summary>
</member>
<member name="M:pilipala.container.post.stack.erase(System.UInt64)">
<summary>
 抹除文章栈
</summary>
</member>
<member name="M:pilipala.container.post.stack.create">
<summary>
 创建文章栈
 返回文章栈id
</summary>
</member>
<member name="F:pilipala.container.comment.Comment.cache">
<summary>
 字段缓存
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.site(Microsoft.FSharp.Core.FSharpResult{System.String,System.Exception})">
<summary>
 站点
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.replyTo(Microsoft.FSharp.Core.FSharpResult{System.UInt64,System.Exception})">
<summary>
 回复到
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.ownerStackId(Microsoft.FSharp.Core.FSharpResult{System.UInt64,System.Exception})">
<summary>
 所属栈id
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.nick(Microsoft.FSharp.Core.FSharpResult{System.String,System.Exception})">
<summary>
 昵称
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.email(Microsoft.FSharp.Core.FSharpResult{System.String,System.Exception})">
<summary>
 电子邮箱
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.ctime(Microsoft.FSharp.Core.FSharpResult{System.DateTime,System.Exception})">
<summary>
 创建时间
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.content(Microsoft.FSharp.Core.FSharpResult{System.String,System.Exception})">
<summary>
 内容
</summary>
</member>
<member name="M:pilipala.container.comment.Comment.set``1(System.String,Microsoft.FSharp.Core.FSharpResult{``0,System.Exception})">
<summary>
 写字段值
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.site">
<summary>
 站点
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.replyTo">
<summary>
 回复到
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.ownerStackId">
<summary>
 所属栈id
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.nick">
<summary>
 昵称
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.email">
<summary>
 电子邮箱
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.ctime">
<summary>
 创建时间
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.content">
<summary>
 内容
</summary>
</member>
<member name="P:pilipala.container.comment.Comment.commentId">
<summary>
 评论id
</summary>
</member>
<member name="M:pilipala.container.comment.Comment.get``1(System.String)">
<summary>
 取字段会从缓存头提取
 写字段会同时写到缓存头
 此举使得写缓存时不用考虑清理缓存中相同字段的情况
 同时读缓存时也不用考虑相同的两份缓存哪个是最近写入的
 取字段值
</summary>
</member>
<member name="M:pilipala.container.comment.PostStack.get_comments(pilipala.container.post.stack.PostStack)">
<summary>
 评论
</summary>
</member>
<member name="M:pilipala.container.comment.erase(System.UInt64)">
<summary>
 抹除评论
</summary>
</member>
<member name="M:pilipala.container.comment.recycle(System.UInt64)">
<summary>
 回收评论
</summary>
</member>
<member name="M:pilipala.container.comment.create">
<summary>
 创建评论
 返回评论id
</summary>
</member>
<member name="T:pilipala.container.tag.Tag">
<summary>
 标签本质上是stackId的列表
 可以根据该列表过滤出不同的文章
 标签别名
</summary>
</member>
<member name="M:pilipala.container.tag.not(Microsoft.FSharp.Collections.FSharpList{System.UInt64},Microsoft.FSharp.Collections.FSharpList{pilipala.container.post.stack.PostStack})">
<summary>
 过滤出不是 tag 的文章
</summary>
</member>
<member name="M:pilipala.container.tag.is(Microsoft.FSharp.Collections.FSharpList{System.UInt64},Microsoft.FSharp.Collections.FSharpList{pilipala.container.post.stack.PostStack})">
<summary>
 过滤出是 tag 的文章
</summary>
</member>
<member name="M:pilipala.container.tag.getTag(System.String)">
<summary>
 取得标签
</summary>
</member>
<member name="M:pilipala.container.tag.detagFor(System.UInt64,System.String)">
<summary>
 为文章栈去除标签
</summary>
</member>
<member name="M:pilipala.container.tag.tagTo(System.UInt64,System.String)">
<summary>
 为文章栈加标签
</summary>
</member>
<member name="M:pilipala.container.tag.erase(System.String)">
<summary>
 抹除标签
</summary>
</member>
<member name="M:pilipala.container.tag.create(System.String)">
<summary>
 创建标签
 返回被创建标签名
</summary>
</member>
<member name="T:pilipala.container.tag.FailedToDetag">
<summary>
 无法去标签错误
</summary>
</member>
<member name="T:pilipala.container.tag.FailedToTag">
<summary>
 无法加标签错误
</summary>
</member>
<member name="T:pilipala.container.tag.FailedToEraseTag">
<summary>
 无法抹除标签错误
</summary>
</member>
<member name="T:pilipala.container.tag.FailedToCreateTag">
<summary>
 无法创建标签错误
</summary>
</member>
<member name="F:pilipala.kernel.launcher.pilipala.kernel'">
<summary>
内核单例
</summary>
</member>
<member name="M:pilipala.kernel.launcher.pilipala.start(System.String)">
<summary>
启动内核
</summary>
</member>
<member name="P:pilipala.kernel.launcher.pilipala.kernel(Microsoft.FSharp.Core.FSharpOption{pilipala.kernel.launcher.pilipala})">
<summary>
内核单例访问器
</summary>
</member>
<member name="P:pilipala.kernel.launcher.pilipala.kernel">
<summary>
内核单例访问器
</summary>
</member>
<member name="M:pilipala.kernel.launcher.pala">
<summary>
 取得内核单例
</summary>
</member>
<member name="T:pilipala.kernel.launcher.KernelUninitialized">
<summary>
 内核未初始化错误
</summary>
</member>
<member name="M:pilipala.kernel.token.check(System.String)">
<summary>
 检查token是否合法
</summary>
</member>
<member name="M:pilipala.kernel.token.erase(System.String)">
<summary>
 抹除凭据
</summary>
</member>
<member name="M:pilipala.kernel.token.create">
<summary>
 创建凭据
 返回凭据值
</summary>
</member>
<member name="T:pilipala.kernel.token.DuplicateToken">
<summary>
 凭据重复
</summary>
</member>
<member name="T:pilipala.kernel.token.FailedToUpdateTokenAtime">
<summary>
 无法更新凭据访问时间错误
</summary>
</member>
<member name="T:pilipala.kernel.token.FailedToEraseToken">
<summary>
 无法抹除凭据错误
</summary>
</member>
<member name="T:pilipala.kernel.token.FailedToCreateToken">
<summary>
 无法创建凭据错误
</summary>
</member>
<member name="M:pilipala.kernel.auth.SecureChannel.send(System.String)">
<summary>
 向信道发送消息
</summary>
</member>
<member name="M:pilipala.kernel.auth.SecureChannel.recv">
<summary>
 从信道接收消息
 此方法阻塞当前线程
</summary>
</member>
<member name="T:pilipala.kernel.auth.SecureChannel">
<summary>
 安全信道
</summary>
</member>
<member name="M:pilipala.kernel.auth.serveOn(System.UInt16,Microsoft.FSharp.Core.FSharpFunc{pilipala.kernel.auth.SecureChannel,Microsoft.FSharp.Core.Unit})">
<summary>
 在指定端口启动认证服务
 认证通过后，会以 SecureChannel 为参数执行闭包 f
</summary>
</member>
<member name="T:pilipala.kernel.palang.UnknownSyntax">
<summary>
 各类命令解析
 未知语法错误
</summary>
</member>
<member name="M:pilipala.kernel.assembly.assembly.getAttribute``1">
<summary>
 取得程序集属性
</summary>
</member>
</members>
</doc>
